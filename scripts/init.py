CPP_MAIN_FILE_PATH = '../main.cpp'
OPENCL_KERNEL_FILE_PATH = '../kernels/particle_position_update.cl'

FILE_HEADER = 'This file is generated by the init.py script during the cmake configuration process'

CPP_MAIN_FILE_TEMPLATE = """\
//{header}

#include "Application/Application.hpp"
#include "misc/BivariateFunction.hpp"

int main ()
{{
    BivariateFunction x_function = [](SDL_FPoint vector) -> float {{ return {x_expression}; }};
    BivariateFunction y_function = [](SDL_FPoint vector) -> float {{ return {y_expression}; }};

    Application application (x_function, y_function);

    return 0;
}}
"""

OPENCL_KERNEL_FILE_TEMPLATE = """\
//{header}

typedef struct Vector
{{
    float x, y;
}} Vector;

float x_function (Vector vector) {{ return {x_expression}; }}
float y_function (Vector vector) {{ return {y_expression}; }}

__kernel void update_particle_position_matrix
(
    __global Vector * particle_position_matrix_buffer
)
{{
    int id = get_global_id(0);

    Vector v = {{ 8, 8 }};

    particle_position_matrix_buffer[id] = v;
}}
"""


def create_file_from_template(path: str, template: str, template_values: dict):
    with open(path, 'w') as file:
        file_contents = template.format(**template_values)
        file.write(file_contents)


with open('../Functions') as function_file:
    x_expression, y_expression = function_file.read().splitlines()

x_expression = x_expression.replace('x', 'vector.x').replace('y', 'vector.y')
y_expression = y_expression.replace('x', 'vector.x').replace('y', 'vector.y')

format_kwargs = {'header': FILE_HEADER, 'x_expression': x_expression, 'y_expression': y_expression}

create_file_from_template(CPP_MAIN_FILE_PATH, CPP_MAIN_FILE_TEMPLATE, format_kwargs)
create_file_from_template(OPENCL_KERNEL_FILE_PATH, OPENCL_KERNEL_FILE_TEMPLATE, format_kwargs)
